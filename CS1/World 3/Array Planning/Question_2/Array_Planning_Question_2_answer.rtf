{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-BoldOblique;\f1\fswiss\fcharset0 Helvetica-Oblique;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww21120\viewh22340\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i\b\fs36 \cf0 Question 2
\f1\b0\fs26 \
Now suppose you want to allow your buyers to toggle the order in which a list of products is displayed.\
\
Write out a detailed plan for a program to reverse the order of an array of product IDs.\
\
For example, if the array contains the elements \{0, 99, 7, 4\}, then after reversal it will contain  \{4, 7, 99, 0\}.
\f2\i0 \
\
\'97\'97\'97\'97\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i\b\fs36 \cf0 Answer\'85
\f2\i0\b0\fs26 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
In order to reverse the array we need to create an expression that will represent the following: \
\
Original Array  \'97\'97> New Array \
      Index			    Index\
\
	0 		\'97>	     3      \
	1		\'97>	     2   \
	2		\'97>	     1    \
	3		\'97>	     0    \
\
\
To start, you first need to initialize your original array that contains the elements 
\f1\i \{0, 99, 7, 4\}. \
\

\f2\i0 int[] originalArray = \{0, 99, 7, 4\};\
\
Then we need to also initialize the new array and ensure it has the same length as the originalArray, but we won\'92t assign any element values yet since we will be reversing it and assigning values from the originalArray via a while loop. \
\
int[] newArray = new int[originalArray.length];\
\
Next, we can use a while loop in order to reverse the element values within the originalArray and assign them to the newArray using the index. First we need to declare a variable index, and assign it a value of 0. Then we start our while loop which will iterate as long as the index is less than the originalArray.length.  Within the while loop this is where we leverage the iteration of the while loop to assign the values of the newArray using the index. \
\
Referencing the chart above we know we have to reverse the index to form the new Array. \
\
When you think about the values in an array of length N the positions in the array can be represented as: \{0, 1, 2, 3, 4, \'85. N-3, N-2, N-1\}\
\
and we can relate them to the original and new array like so: \
\
originalArray[0] \'97> newArray[N-1]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 originalArray[1] \'97> newArray[N-2]\
originalArray[2] \'97> newArray[N-3]\
\'85. and so on\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
From this you can develop a generalized expression like this: \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 originalArray[index] 	\'97\'97>  newArray[length - (index +1)] \
\
which can then lead you to the assignment of the new array as follows: \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
newArray[originalArray.length - (index + 1)] = originalArray[index];\
\
In order for the while loop to keep iterating, we need to increase the index by 1 (index++). \
\
Finally, to print the new array we can use print line, placed outside of the while loop: \
\
println(newArray);\
\
and voila, you have your new reverse array. \{4, 7, 99, 0\} derived from the original array.\
\
}