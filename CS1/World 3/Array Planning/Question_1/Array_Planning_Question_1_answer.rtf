{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-BoldOblique;\f1\fswiss\fcharset0 Helvetica-Oblique;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww23760\viewh18700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i\b\fs36 \cf0 Question 1
\f1\b0\fs26 \
Suppose you have a set of products on your shop, and you want to make it possible for buyers to find the most expensive item that is under a given max (perhaps useful when shopping for a gift!).\
\
Write out a detailed plan for a program to find the largest product price in an array that is smaller than a ceiling C.\
\
For example, suppose the array has the values \{4, 14, 11, 100, 6\} and C=12. The program should report 11 as the answer.
\f2\i0 \
\
\'97\'97\'97\'97\'97\'97\
\
\

\f0\i\b\fs36 Answer\'85
\f2\i0\b0\fs26 \
\
The first step is to initialize your array. There are two ways this can be done, either by declaring the number of indices in the array, and assign each index a value, or creating a shortcut and initialize the array with values already inside in one step. I have chosen the short cut method of initializing the array with values already inside the array in one step. \
\
int[] myProductPricesList = \{4, 14, 11, 100, 6\};\
\
There will be 2 checks we will need to complete in order to solve this question through every iteration via the while loop and the array. First you have to check if the price of the product is below your price ceiling or \'93within your budget\'94 of $12. If that condition is met then we also need to check if the price is the highest priced product out of the other eligible prices to maximize your budget. \
\
In order to do this you will need to define and initialize price variables. One for the highestAffordablePrice which will have an initial value of 0, and budget, which will have a value of 12 this is your price ceiling. \
\
int highestAffordablePrice = 0;\
int budget = 12;\
\
Next we need to iterate through our array via a while loop and at each step we need to check if the price is less than your budget through an if statement and also if that price is the highest affordable price out of the options that are within your budget. \
\
When we iterate through an array you use an index, and will assign it an initial value of 0.\
\
int index = 0;\
\
While the index number is lower than the length of the array which can be represented as myProductPricesList.length, we will execute the while loop and then increase the index by 1 at the end for it to continue until it reaches its limit. This will occur after 4, because after the 4th iteration the index will be increased to 5 and then it is no longer less than the length of the array (ie. 5 is not less than 5). \
\
Within my while loop I will initialize and declare a variable for the value that is contained within the array at a specific index point: int value = myProductPricesList[index] - this will help me in the next step when I create an if statement in order to check if the value at a specific index is less than my budget. \
\
If the price is less than my budget, then we need a nested if statement afterwards to compare the value with the highestAffordablePrice and check if it is greater than the current highestAffordablePrice. If the value is greater than the highestAffordablePrice then I will assign that value as the highestAffordablePrice. Then the index will increase by 1 (index++), and the loop repeats until the index number is higher than the array length. \
\
Finally in order to print the value of the highestAffordablePrice, I use print line function which should be placed OUTSIDE of the while loop.\
\
println(highestAffordablePrice); \
\
This will result in the highest affordable price (Aka what price you can maximize your budget with) being $11. \
\
\
\
// Initialization (First way)\
int[] myProductPricesList = new int[productListSize];\
myProductPricesList[0] = 15;\
myProductPricesList[1] = 10;\
myProductPricesList[2] = 18;\
myProductPricesList[3] = 25;\
myProductPricesList[4] = 8;\
myProductPricesList[5] = 19;\
myProductPricesList[6] = 29;\
myProductPricesList[7] = 6;\
\
// Initialization (Second way)\
int[] myProductPricesList = \{ 4,  14,  11,  100,  6\};\
\
\
//do the iteration of array\
int highestAffordablePrice = 0;\
int budget = 12;\
\
\
int index = 0;\
while (index < myProductPricesList.length)\
\{\
  int value = myProductPricesList[index];\
  if(value < budget)\
  \{\
    if(value > highestAffordablePrice)\
    \{\
      highestAffordablePrice = value;\
    \}\
\
  \}\
\
  index++;\
\}\
\
println(highestAffordablePrice);\
\
\
\
}